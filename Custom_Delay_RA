#!/bin/sh
#
#	configured to fail occassionally.
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Brï¿½e
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SysdDelay" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This is a systemd process Resource Agent used to delay the return on processes
that start other processes (Tomcat) so that everything is ready when the RA is
returning "Started"
It is based on the ocf:heartbeat:Delay RA and the ocf:heartbeat:Dummy RA.
I take no responsibilty whatsoever for what happens if you use it.

</longdesc>
<shortdesc lang="en">Used to delay the start return on systemd processes</shortdesc>

<parameters>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_RSCTMP}/SysdDelay-${OCF_RESOURCE_INSTANCE}.state" />
</parameter>

<parameter name="startdelay" unique="0" required="0">
<longdesc lang="en">
How long in seconds to delay on start operation.
</longdesc>
<shortdesc lang="en">Start delay</shortdesc>
<content type="integer" default="0" />
</parameter>

<parameter name="process" unique="0" required="1">
<longdesc lang="en">
Which systemd process to start.
</longdesc>
<shortdesc lang="en">Systemd process</shortdesc>
<content type="string" />
</parameter>

<parameter name="url" unique="0" required="0">
<longdesc lang="en">
URL to get header from (check if up/down)
</longdesc>
<shortdesc lang="en">URL Header</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0" />
<action name="reload"       timeout="20" />
<action name="migrate_to"   timeout="20" />
<action name="migrate_from" timeout="20" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="20" />
</actions>
</resource-agent>
END
}

#######################################################################

sysddelay_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

sysddelay_start() {
    sysddelay_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    else
	systemctl start ${OCF_RESKEY_process}
	if [ ${OCF_RESKEY_startdelay} -gt 0 ]; then
	  sleep ${OCF_RESKEY_startdelay}
	fi

	# if url is set, curl header. This will make sure the
	# service is up and running before returning started to cluster.
	if [ -n "$OCF_RESKEY_url" ]; then
	   while true; do
		sleep 1
		curl -I ${OCF_RESKEY_url}
		if [ $? = 0 ]; then
		  break
		fi
	   done
	fi
    fi
    touch ${OCF_RESKEY_state}
}

sysddelay_stop() {
    sysddelay_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	systemctl stop ${OCF_RESKEY_process}
	rm ${OCF_RESKEY_state}
    else
	systemctl stop ${OCF_RESKEY_process}
    fi
    return $OCF_SUCCESS
}

sysddelay_monitor() {
	# Monitor _MUST!_ differentiate correctly between running
	# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
	# That is THREE states, not just yes/no.

	if [ -f ${OCF_RESKEY_state} ]; then
	    return $OCF_SUCCESS
	fi
	if false ; then
		return $OCF_ERR_GENERIC
	fi

	if ! ocf_is_probe && [ "$__OCF_ACTION" = "monitor" ]; then
		# set exit string only when NOT_RUNNING occurs during an actual monitor operation.
		ocf_exit_reason "No process state file found"
	fi
	return $OCF_NOT_RUNNING
}

Are_Valid_Numbers() {
  for i in "$@"; do
        echo $i |grep -v [^0-9.] |grep -q -v [.].*[.]
        if test $? -ne 0; then
          return $OCF_ERR_ARGS
        fi
  done
  return $OCF_SUCCESS
}

sysddelay_validate() {

    # Is the state directory writable?
    state_dir=`dirname "$OCF_RESKEY_state"`
    touch "$state_dir/$$"
    if [ $? != 0 ]; then
	ocf_exit_reason "State file \"$OCF_RESKEY_state\" is not writable"
	return $OCF_ERR_ARGS
    fi
    rm "$state_dir/$$"

    if Are_Valid_Numbers $OCF_RESKEY_startdelay; then

# _Return_ on validation success
        return $OCF_SUCCESS
  else
        ocf_exit_reason "Some of the instance parameters are invalid"
# _Exit_ on validation failure
        exit $OCF_ERR_ARGS
    fi

#    return $OCF_SUCCESS
}

: ${OCF_RESKEY_url}
: ${OCF_RESKEY_process=""}
: ${OCF_RESKEY_startdelay=0}
: ${OCF_RESKEY_state=${HA_RSCTMP}/SysdDelay-${OCF_RESOURCE_INSTANCE}.state}
: ${OCF_RESKEY_fake="sysddelay"}

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		sysddelay_start;;
stop)		sysddelay_stop;;
monitor)	sysddelay_monitor;;
migrate_to)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	        sysddelay_stop
		;;
migrate_from)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
	        sysddelay_start
		;;
reload)		ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
		;;
validate-all)	sysddelay_validate;;
usage|help)	sysddelay_usage
		exit $OCF_SUCCESS
		;;
*)		sysddelay_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
